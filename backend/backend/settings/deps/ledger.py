import os
import json

LEDGER_CHANNELS = {
    channel: chaincode
    for channels in json.loads(os.getenv('LEDGER_CHANNELS'))
    for channel, chaincode in channels.items()
}

LEDGER_MSP_ID = os.getenv('LEDGER_MSP_ID')
LEDGER_USER_NAME = os.getenv('LEDGER_USER_NAME')

LEDGER_PEER_HOST = os.getenv('LEDGER_PEER_HOST')
LEDGER_PEER_PORT = int(os.getenv('LEDGER_PEER_PORT'))
LEDGER_PEER_NAME = 'peer'
LEDGER_PEER_TLS_CA_CERTS = '/var/hyperledger/ca/cacert.pem'
LEDGER_PEER_TLS_CLIENT_KEY = '/var/hyperledger/tls/client/pair/tls.key'
LEDGER_PEER_TLS_CLIENT_CERT = '/var/hyperledger/tls/client/pair/tls.crt'

LEDGER_CLIENT_STATE_STORE = '/var/substra/hfc-cvs'
LEDGER_CLIENT_KEY_PATH = '/var/hyperledger/msp/keystore/*'
LEDGER_CLIENT_CERT_PATH = '/var/hyperledger/msp/signcerts/cert.pem'

LEDGER_SYNC_ENABLED = True
LEDGER_CALL_RETRY = True
LEDGER_WAIT_FOR_EVENT_TIMEOUT_SECONDS = int(os.getenv('LEDGER_WAIT_FOR_EVENT_TIMEOUT_SECONDS'))
LEDGER_INVOKE_STRATEGY = os.getenv('LEDGER_INVOKE_STRATEGY')
LEDGER_QUERY_STRATEGY = os.getenv('LEDGER_QUERY_STRATEGY')

LEDGER_GRPC_MAX_SEND_MESSAGE_LENGTH = -1
LEDGER_GRPC_MAX_RECEIVE_MESSAGE_LENGTH = -1
LEDGER_GRPC_KEEPALIVE_TIMEOUT_MS = 20000
LEDGER_GRPC_HTTP2_MAX_PINGS_WITHOUT_DATA = 0
LEDGER_GRPC_KEEPALIVE_PERMIT_WITHOUT_CALLS = 1
LEDGER_GRPC_KEEPALIVE_TIME_MS = int(os.getenv('LEDGER_GRPC_KEEPALIVE_TIME_MS'))
LEDGER_GRPC_HTTP2_MIN_TIME_BETWEEN_PINGS_MS = int(os.getenv('LEDGER_GRPC_HTTP2_MIN_TIME_BETWEEN_PINGS_MS'))
