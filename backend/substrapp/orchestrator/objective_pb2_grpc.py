# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import objective_pb2 as objective__pb2


class ObjectiveServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterObjective = channel.unary_unary(
                '/orchestrator.ObjectiveService/RegisterObjective',
                request_serializer=objective__pb2.NewObjective.SerializeToString,
                response_deserializer=objective__pb2.Objective.FromString,
                )
        self.GetObjective = channel.unary_unary(
                '/orchestrator.ObjectiveService/GetObjective',
                request_serializer=objective__pb2.GetObjectiveParam.SerializeToString,
                response_deserializer=objective__pb2.Objective.FromString,
                )
        self.QueryObjectives = channel.unary_unary(
                '/orchestrator.ObjectiveService/QueryObjectives',
                request_serializer=objective__pb2.QueryObjectivesParam.SerializeToString,
                response_deserializer=objective__pb2.QueryObjectivesResponse.FromString,
                )
        self.GetLeaderboard = channel.unary_unary(
                '/orchestrator.ObjectiveService/GetLeaderboard',
                request_serializer=objective__pb2.LeaderboardQueryParam.SerializeToString,
                response_deserializer=objective__pb2.Leaderboard.FromString,
                )


class ObjectiveServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterObjective(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjective(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryObjectives(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeaderboard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ObjectiveServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterObjective': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterObjective,
                    request_deserializer=objective__pb2.NewObjective.FromString,
                    response_serializer=objective__pb2.Objective.SerializeToString,
            ),
            'GetObjective': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjective,
                    request_deserializer=objective__pb2.GetObjectiveParam.FromString,
                    response_serializer=objective__pb2.Objective.SerializeToString,
            ),
            'QueryObjectives': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryObjectives,
                    request_deserializer=objective__pb2.QueryObjectivesParam.FromString,
                    response_serializer=objective__pb2.QueryObjectivesResponse.SerializeToString,
            ),
            'GetLeaderboard': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeaderboard,
                    request_deserializer=objective__pb2.LeaderboardQueryParam.FromString,
                    response_serializer=objective__pb2.Leaderboard.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orchestrator.ObjectiveService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ObjectiveService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterObjective(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ObjectiveService/RegisterObjective',
            objective__pb2.NewObjective.SerializeToString,
            objective__pb2.Objective.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjective(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ObjectiveService/GetObjective',
            objective__pb2.GetObjectiveParam.SerializeToString,
            objective__pb2.Objective.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryObjectives(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ObjectiveService/QueryObjectives',
            objective__pb2.QueryObjectivesParam.SerializeToString,
            objective__pb2.QueryObjectivesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLeaderboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ObjectiveService/GetLeaderboard',
            objective__pb2.LeaderboardQueryParam.SerializeToString,
            objective__pb2.Leaderboard.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
