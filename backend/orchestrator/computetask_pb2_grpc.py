# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import computetask_pb2 as computetask__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in computetask_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ComputeTaskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterTasks = channel.unary_unary(
                '/orchestrator.ComputeTaskService/RegisterTasks',
                request_serializer=computetask__pb2.RegisterTasksParam.SerializeToString,
                response_deserializer=computetask__pb2.RegisterTasksResponse.FromString,
                _registered_method=True)
        self.QueryTasks = channel.unary_unary(
                '/orchestrator.ComputeTaskService/QueryTasks',
                request_serializer=computetask__pb2.QueryTasksParam.SerializeToString,
                response_deserializer=computetask__pb2.QueryTasksResponse.FromString,
                _registered_method=True)
        self.GetTask = channel.unary_unary(
                '/orchestrator.ComputeTaskService/GetTask',
                request_serializer=computetask__pb2.GetTaskParam.SerializeToString,
                response_deserializer=computetask__pb2.ComputeTask.FromString,
                _registered_method=True)
        self.ApplyTaskAction = channel.unary_unary(
                '/orchestrator.ComputeTaskService/ApplyTaskAction',
                request_serializer=computetask__pb2.ApplyTaskActionParam.SerializeToString,
                response_deserializer=computetask__pb2.ApplyTaskActionResponse.FromString,
                _registered_method=True)
        self.GetTaskInputAssets = channel.unary_unary(
                '/orchestrator.ComputeTaskService/GetTaskInputAssets',
                request_serializer=computetask__pb2.GetTaskInputAssetsParam.SerializeToString,
                response_deserializer=computetask__pb2.GetTaskInputAssetsResponse.FromString,
                _registered_method=True)
        self.DisableOutput = channel.unary_unary(
                '/orchestrator.ComputeTaskService/DisableOutput',
                request_serializer=computetask__pb2.DisableOutputParam.SerializeToString,
                response_deserializer=computetask__pb2.DisableOutputResponse.FromString,
                _registered_method=True)


class ComputeTaskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyTaskAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskInputAssets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComputeTaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTasks,
                    request_deserializer=computetask__pb2.RegisterTasksParam.FromString,
                    response_serializer=computetask__pb2.RegisterTasksResponse.SerializeToString,
            ),
            'QueryTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryTasks,
                    request_deserializer=computetask__pb2.QueryTasksParam.FromString,
                    response_serializer=computetask__pb2.QueryTasksResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=computetask__pb2.GetTaskParam.FromString,
                    response_serializer=computetask__pb2.ComputeTask.SerializeToString,
            ),
            'ApplyTaskAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyTaskAction,
                    request_deserializer=computetask__pb2.ApplyTaskActionParam.FromString,
                    response_serializer=computetask__pb2.ApplyTaskActionResponse.SerializeToString,
            ),
            'GetTaskInputAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskInputAssets,
                    request_deserializer=computetask__pb2.GetTaskInputAssetsParam.FromString,
                    response_serializer=computetask__pb2.GetTaskInputAssetsResponse.SerializeToString,
            ),
            'DisableOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableOutput,
                    request_deserializer=computetask__pb2.DisableOutputParam.FromString,
                    response_serializer=computetask__pb2.DisableOutputResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orchestrator.ComputeTaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('orchestrator.ComputeTaskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ComputeTaskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.ComputeTaskService/RegisterTasks',
            computetask__pb2.RegisterTasksParam.SerializeToString,
            computetask__pb2.RegisterTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.ComputeTaskService/QueryTasks',
            computetask__pb2.QueryTasksParam.SerializeToString,
            computetask__pb2.QueryTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.ComputeTaskService/GetTask',
            computetask__pb2.GetTaskParam.SerializeToString,
            computetask__pb2.ComputeTask.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApplyTaskAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.ComputeTaskService/ApplyTaskAction',
            computetask__pb2.ApplyTaskActionParam.SerializeToString,
            computetask__pb2.ApplyTaskActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskInputAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.ComputeTaskService/GetTaskInputAssets',
            computetask__pb2.GetTaskInputAssetsParam.SerializeToString,
            computetask__pb2.GetTaskInputAssetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orchestrator.ComputeTaskService/DisableOutput',
            computetask__pb2.DisableOutputParam.SerializeToString,
            computetask__pb2.DisableOutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
