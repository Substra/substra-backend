# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import function_pb2 as function__pb2


class AlgoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAlgo = channel.unary_unary(
                '/orchestrator.AlgoService/RegisterAlgo',
                request_serializer=function__pb2.NewAlgo.SerializeToString,
                response_deserializer=function__pb2.Function.FromString,
                )
        self.GetAlgo = channel.unary_unary(
                '/orchestrator.AlgoService/GetAlgo',
                request_serializer=function__pb2.GetAlgoParam.SerializeToString,
                response_deserializer=function__pb2.Function.FromString,
                )
        self.QueryAlgos = channel.unary_unary(
                '/orchestrator.AlgoService/QueryAlgos',
                request_serializer=function__pb2.QueryAlgosParam.SerializeToString,
                response_deserializer=function__pb2.QueryAlgosResponse.FromString,
                )
        self.UpdateAlgo = channel.unary_unary(
                '/orchestrator.AlgoService/UpdateAlgo',
                request_serializer=function__pb2.UpdateAlgoParam.SerializeToString,
                response_deserializer=function__pb2.UpdateAlgoResponse.FromString,
                )


class AlgoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterAlgo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAlgo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryAlgos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAlgo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlgoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAlgo': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAlgo,
                    request_deserializer=function__pb2.NewAlgo.FromString,
                    response_serializer=function__pb2.Function.SerializeToString,
            ),
            'GetAlgo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAlgo,
                    request_deserializer=function__pb2.GetAlgoParam.FromString,
                    response_serializer=function__pb2.Function.SerializeToString,
            ),
            'QueryAlgos': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAlgos,
                    request_deserializer=function__pb2.QueryAlgosParam.FromString,
                    response_serializer=function__pb2.QueryAlgosResponse.SerializeToString,
            ),
            'UpdateAlgo': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAlgo,
                    request_deserializer=function__pb2.UpdateAlgoParam.FromString,
                    response_serializer=function__pb2.UpdateAlgoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orchestrator.AlgoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlgoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterAlgo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.AlgoService/RegisterAlgo',
            function__pb2.NewAlgo.SerializeToString,
            function__pb2.Function.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAlgo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.AlgoService/GetAlgo',
            function__pb2.GetAlgoParam.SerializeToString,
            function__pb2.Function.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryAlgos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.AlgoService/QueryAlgos',
            function__pb2.QueryAlgosParam.SerializeToString,
            function__pb2.QueryAlgosResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAlgo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.AlgoService/UpdateAlgo',
            function__pb2.UpdateAlgoParam.SerializeToString,
            function__pb2.UpdateAlgoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
