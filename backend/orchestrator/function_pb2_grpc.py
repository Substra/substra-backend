# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import function_pb2 as function__pb2


class FunctionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterFunction = channel.unary_unary(
                '/orchestrator.FunctionService/RegisterFunction',
                request_serializer=function__pb2.NewFunction.SerializeToString,
                response_deserializer=function__pb2.Function.FromString,
                )
        self.GetFunction = channel.unary_unary(
                '/orchestrator.FunctionService/GetFunction',
                request_serializer=function__pb2.GetFunctionParam.SerializeToString,
                response_deserializer=function__pb2.Function.FromString,
                )
        self.QueryFunctions = channel.unary_unary(
                '/orchestrator.FunctionService/QueryFunctions',
                request_serializer=function__pb2.QueryFunctionsParam.SerializeToString,
                response_deserializer=function__pb2.QueryFunctionsResponse.FromString,
                )
        self.UpdateFunction = channel.unary_unary(
                '/orchestrator.FunctionService/UpdateFunction',
                request_serializer=function__pb2.UpdateFunctionParam.SerializeToString,
                response_deserializer=function__pb2.UpdateFunctionResponse.FromString,
                )


class FunctionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryFunctions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FunctionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterFunction,
                    request_deserializer=function__pb2.NewFunction.FromString,
                    response_serializer=function__pb2.Function.SerializeToString,
            ),
            'GetFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFunction,
                    request_deserializer=function__pb2.GetFunctionParam.FromString,
                    response_serializer=function__pb2.Function.SerializeToString,
            ),
            'QueryFunctions': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryFunctions,
                    request_deserializer=function__pb2.QueryFunctionsParam.FromString,
                    response_serializer=function__pb2.QueryFunctionsResponse.SerializeToString,
            ),
            'UpdateFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFunction,
                    request_deserializer=function__pb2.UpdateFunctionParam.FromString,
                    response_serializer=function__pb2.UpdateFunctionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orchestrator.FunctionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FunctionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.FunctionService/RegisterFunction',
            function__pb2.NewFunction.SerializeToString,
            function__pb2.Function.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.FunctionService/GetFunction',
            function__pb2.GetFunctionParam.SerializeToString,
            function__pb2.Function.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryFunctions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.FunctionService/QueryFunctions',
            function__pb2.QueryFunctionsParam.SerializeToString,
            function__pb2.QueryFunctionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.FunctionService/UpdateFunction',
            function__pb2.UpdateFunctionParam.SerializeToString,
            function__pb2.UpdateFunctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
