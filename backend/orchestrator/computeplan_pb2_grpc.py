# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import computeplan_pb2 as computeplan__pb2


class ComputePlanServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterPlan = channel.unary_unary(
                '/orchestrator.ComputePlanService/RegisterPlan',
                request_serializer=computeplan__pb2.NewComputePlan.SerializeToString,
                response_deserializer=computeplan__pb2.ComputePlan.FromString,
                )
        self.GetPlan = channel.unary_unary(
                '/orchestrator.ComputePlanService/GetPlan',
                request_serializer=computeplan__pb2.GetComputePlanParam.SerializeToString,
                response_deserializer=computeplan__pb2.ComputePlan.FromString,
                )
        self.ApplyPlanAction = channel.unary_unary(
                '/orchestrator.ComputePlanService/ApplyPlanAction',
                request_serializer=computeplan__pb2.ApplyPlanActionParam.SerializeToString,
                response_deserializer=computeplan__pb2.ApplyPlanActionResponse.FromString,
                )
        self.QueryPlans = channel.unary_unary(
                '/orchestrator.ComputePlanService/QueryPlans',
                request_serializer=computeplan__pb2.QueryPlansParam.SerializeToString,
                response_deserializer=computeplan__pb2.QueryPlansResponse.FromString,
                )
        self.UpdatePlan = channel.unary_unary(
                '/orchestrator.ComputePlanService/UpdatePlan',
                request_serializer=computeplan__pb2.UpdateComputePlanParam.SerializeToString,
                response_deserializer=computeplan__pb2.UpdateComputePlanResponse.FromString,
                )
        self.IsPlanRunning = channel.unary_unary(
                '/orchestrator.ComputePlanService/IsPlanRunning',
                request_serializer=computeplan__pb2.IsPlanRunningParam.SerializeToString,
                response_deserializer=computeplan__pb2.IsPlanRunningResponse.FromString,
                )


class ComputePlanServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterPlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyPlanAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryPlans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsPlanRunning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComputePlanServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterPlan': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterPlan,
                    request_deserializer=computeplan__pb2.NewComputePlan.FromString,
                    response_serializer=computeplan__pb2.ComputePlan.SerializeToString,
            ),
            'GetPlan': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlan,
                    request_deserializer=computeplan__pb2.GetComputePlanParam.FromString,
                    response_serializer=computeplan__pb2.ComputePlan.SerializeToString,
            ),
            'ApplyPlanAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyPlanAction,
                    request_deserializer=computeplan__pb2.ApplyPlanActionParam.FromString,
                    response_serializer=computeplan__pb2.ApplyPlanActionResponse.SerializeToString,
            ),
            'QueryPlans': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryPlans,
                    request_deserializer=computeplan__pb2.QueryPlansParam.FromString,
                    response_serializer=computeplan__pb2.QueryPlansResponse.SerializeToString,
            ),
            'UpdatePlan': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePlan,
                    request_deserializer=computeplan__pb2.UpdateComputePlanParam.FromString,
                    response_serializer=computeplan__pb2.UpdateComputePlanResponse.SerializeToString,
            ),
            'IsPlanRunning': grpc.unary_unary_rpc_method_handler(
                    servicer.IsPlanRunning,
                    request_deserializer=computeplan__pb2.IsPlanRunningParam.FromString,
                    response_serializer=computeplan__pb2.IsPlanRunningResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orchestrator.ComputePlanService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ComputePlanService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterPlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ComputePlanService/RegisterPlan',
            computeplan__pb2.NewComputePlan.SerializeToString,
            computeplan__pb2.ComputePlan.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ComputePlanService/GetPlan',
            computeplan__pb2.GetComputePlanParam.SerializeToString,
            computeplan__pb2.ComputePlan.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyPlanAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ComputePlanService/ApplyPlanAction',
            computeplan__pb2.ApplyPlanActionParam.SerializeToString,
            computeplan__pb2.ApplyPlanActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryPlans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ComputePlanService/QueryPlans',
            computeplan__pb2.QueryPlansParam.SerializeToString,
            computeplan__pb2.QueryPlansResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ComputePlanService/UpdatePlan',
            computeplan__pb2.UpdateComputePlanParam.SerializeToString,
            computeplan__pb2.UpdateComputePlanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsPlanRunning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.ComputePlanService/IsPlanRunning',
            computeplan__pb2.IsPlanRunningParam.SerializeToString,
            computeplan__pb2.IsPlanRunningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
