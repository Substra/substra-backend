"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import computeplan_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ComputePlanServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    RegisterPlan: grpc.UnaryUnaryMultiCallable[
        computeplan_pb2.NewComputePlan,
        computeplan_pb2.ComputePlan,
    ]
    GetPlan: grpc.UnaryUnaryMultiCallable[
        computeplan_pb2.GetComputePlanParam,
        computeplan_pb2.ComputePlan,
    ]
    ApplyPlanAction: grpc.UnaryUnaryMultiCallable[
        computeplan_pb2.ApplyPlanActionParam,
        computeplan_pb2.ApplyPlanActionResponse,
    ]
    QueryPlans: grpc.UnaryUnaryMultiCallable[
        computeplan_pb2.QueryPlansParam,
        computeplan_pb2.QueryPlansResponse,
    ]
    UpdatePlan: grpc.UnaryUnaryMultiCallable[
        computeplan_pb2.UpdateComputePlanParam,
        computeplan_pb2.UpdateComputePlanResponse,
    ]
    IsPlanRunning: grpc.UnaryUnaryMultiCallable[
        computeplan_pb2.IsPlanRunningParam,
        computeplan_pb2.IsPlanRunningResponse,
    ]

class ComputePlanServiceAsyncStub:
    RegisterPlan: grpc.aio.UnaryUnaryMultiCallable[
        computeplan_pb2.NewComputePlan,
        computeplan_pb2.ComputePlan,
    ]
    GetPlan: grpc.aio.UnaryUnaryMultiCallable[
        computeplan_pb2.GetComputePlanParam,
        computeplan_pb2.ComputePlan,
    ]
    ApplyPlanAction: grpc.aio.UnaryUnaryMultiCallable[
        computeplan_pb2.ApplyPlanActionParam,
        computeplan_pb2.ApplyPlanActionResponse,
    ]
    QueryPlans: grpc.aio.UnaryUnaryMultiCallable[
        computeplan_pb2.QueryPlansParam,
        computeplan_pb2.QueryPlansResponse,
    ]
    UpdatePlan: grpc.aio.UnaryUnaryMultiCallable[
        computeplan_pb2.UpdateComputePlanParam,
        computeplan_pb2.UpdateComputePlanResponse,
    ]
    IsPlanRunning: grpc.aio.UnaryUnaryMultiCallable[
        computeplan_pb2.IsPlanRunningParam,
        computeplan_pb2.IsPlanRunningResponse,
    ]

class ComputePlanServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def RegisterPlan(
        self,
        request: computeplan_pb2.NewComputePlan,
        context: _ServicerContext,
    ) -> typing.Union[computeplan_pb2.ComputePlan, collections.abc.Awaitable[computeplan_pb2.ComputePlan]]: ...
    @abc.abstractmethod
    def GetPlan(
        self,
        request: computeplan_pb2.GetComputePlanParam,
        context: _ServicerContext,
    ) -> typing.Union[computeplan_pb2.ComputePlan, collections.abc.Awaitable[computeplan_pb2.ComputePlan]]: ...
    @abc.abstractmethod
    def ApplyPlanAction(
        self,
        request: computeplan_pb2.ApplyPlanActionParam,
        context: _ServicerContext,
    ) -> typing.Union[computeplan_pb2.ApplyPlanActionResponse, collections.abc.Awaitable[computeplan_pb2.ApplyPlanActionResponse]]: ...
    @abc.abstractmethod
    def QueryPlans(
        self,
        request: computeplan_pb2.QueryPlansParam,
        context: _ServicerContext,
    ) -> typing.Union[computeplan_pb2.QueryPlansResponse, collections.abc.Awaitable[computeplan_pb2.QueryPlansResponse]]: ...
    @abc.abstractmethod
    def UpdatePlan(
        self,
        request: computeplan_pb2.UpdateComputePlanParam,
        context: _ServicerContext,
    ) -> typing.Union[computeplan_pb2.UpdateComputePlanResponse, collections.abc.Awaitable[computeplan_pb2.UpdateComputePlanResponse]]: ...
    @abc.abstractmethod
    def IsPlanRunning(
        self,
        request: computeplan_pb2.IsPlanRunningParam,
        context: _ServicerContext,
    ) -> typing.Union[computeplan_pb2.IsPlanRunningResponse, collections.abc.Awaitable[computeplan_pb2.IsPlanRunningResponse]]: ...

def add_ComputePlanServiceServicer_to_server(servicer: ComputePlanServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
