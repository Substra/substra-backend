apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-server
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-server
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-server
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        {{ include "substra.labels" . | nindent 8 }}
        app.kubernetes.io/name: {{ template "substra.name" . }}-server
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- with $.Values.backend.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
      - name: {{ template "substra.name" . }}
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        {{- if .Values.backend.image.pullPolicy }}
        imagePullPolicy: "{{ .Values.backend.image.pullPolicy }}"
        {{- end }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
        command: ["/bin/bash"]
        {{- if eq .Values.backend.settings "prod" }}
        args: ["-c", "uwsgi --ini uwsgi.ini"]
        {{- else }}
        args: ["-c", "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- uwsgi --ini uwsgi.ini"]
        {{- end }}
        envFrom:
          - configMapRef:
              name: {{ include "substra.fullname" . }}-ledger
          - configMapRef:
              name: {{ include "substra.fullname" . }}-orchestrator
        env:
          - name: ORG_NAME
            value: {{ .Values.organization.name }}
          - name: BACKEND_DB_NAME
            value: {{ .Values.postgresql.postgresqlDatabase }}
          - name: BACKEND_DB_USER
            value: {{ .Values.postgresql.postgresqlUsername }}
          - name: BACKEND_DB_PWD
            value: {{ .Values.postgresql.postgresqlPassword }}
          - name: DATABASE_HOST
            value: {{ template  "postgresql.serviceName" . }}
          - name: DEFAULT_DOMAIN
            value: "{{ .Values.backend.defaultDomain }}"
          - name: CELERY_BROKER_URL
            value: "amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@{{ default (include  "rabbitmq.serviceName" .) .Values.rabbitmq.host }}:{{ .Values.rabbitmq.port }}//"
          - name: BACKEND_DEFAULT_PORT
            value: {{ .Values.backend.service.port | quote}}
          - name: MEDIA_ROOT
            value: /var/substra/medias/
          - name: PYTHONUNBUFFERED
            value: "1"
          - name: GZIP_MODELS
            value: {{ .Values.backend.gzipModels | quote }}
          - name: TOKEN_STRATEGY
            value: {{ .Values.backend.tokenStrategy }}
          - name: HTTP_CLIENT_TIMEOUT_SECONDS
            value: {{ .Values.httpClient.timeoutSeconds | quote }}
          - name: PAGINATION_MAX_PAGE_SIZE
            value: {{ .Values.backend.pagination.maxPageSize | quote }}
          - name: COMMON_HOST_DOMAIN
            value: {{ .Values.backend.commonHostDomain | quote }}
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          {{- if .Values.privateCa.enabled }}
          - name: REQUESTS_CA_BUNDLE
            value: /etc/ssl/certs/ca-certificates.crt
          {{- end }}
        {{- with .Values.extraEnv }}
{{ toYaml . | indent 10 }}
        {{- end }}
        ports:
          - name: http
            containerPort: 8000
            protocol: TCP
        volumeMounts:
          {{- range $key, $val := .Values.persistence.volumes }}
          - name: data-{{ $key }}
            mountPath: /var/substra/medias/{{ $key }}
            readOnly: {{ $val.readOnly.server }}
          {{- end }}
          - name: data-servermedias
            mountPath: /var/substra/servermedias
          - name: statics
            mountPath: /usr/src/app/backend/statics
          - name: uwsgi
            mountPath: /usr/src/app/uwsgi.ini
            subPath: uwsgi.ini
            readOnly: true
          {{- if .Values.privateCa.enabled }}
          - mountPath: /etc/ssl/certs
            name: ssl-certs
          {{- end }}
          {{ if $.Values.orchestrator.tls.enabled }}
          - name: orchestrator-tls-cacert
            mountPath: /var/substra/orchestrator/tls/server
          {{ if $.Values.orchestrator.tls.mtls.enabled }}
          - name: orchestrator-tls-client-pair
            mountPath: /var/substra/orchestrator/tls/client
          {{ end }}
          {{ end }}
        livenessProbe:
          httpGet:
            path: /liveness
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 45
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /readiness
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 30
        resources:
          {{- toYaml .Values.backend.resources | nindent 12 }}
      initContainers:
      {{- if .Values.privateCa.enabled }}
      - name: add-cert
        image: {{ .Values.privateCa.image.repository }}
        imagePullPolicy: {{ .Values.privateCa.image.pullPolicy }}
        command: ['sh', '-c']
        args:
        - |
          {{- if .Values.privateCa.image.apkAdd }}
          apk add --update ca-certificates openssl
          {{- end }}
          update-ca-certificates && cp /etc/ssl/certs/* /tmp/certs/
        volumeMounts:
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.configMap.fileName }}
          - mountPath: /tmp/certs/
            name: ssl-certs
      {{- end }}
      {{- if and .Values.securityContext.enabled .Values.persistence.hostPath }}
      - name: chown-pvc
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
        - |
          for dir in `ls -d /var/substra/medias/*`; do
            chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }} $dir
          done
        volumeMounts:
          {{- range $key, $val := .Values.persistence.volumes }}
          - name: data-{{ $key }}
            mountPath: /var/substra/medias/{{ $key }}
          {{- end }}
      {{- end }}
      - name: wait-postgresql
        image: jwilder/dockerize
        command: ['dockerize', '-wait', 'tcp://{{ template  "postgresql.serviceName" . }}:5432']
      - name: init-migrate
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        command: ['python', 'manage.py', 'migrate']
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: backend.settings.{{ .Values.backend.settings }}
        - name: ORG_NAME
          value: {{ .Values.organization.name }}
        - name: BACKEND_DB_NAME
          value: {{ .Values.postgresql.postgresqlDatabase }}
        - name: BACKEND_DB_USER
          value: {{ .Values.postgresql.postgresqlUsername }}
        - name: BACKEND_DB_PWD
          value: {{ .Values.postgresql.postgresqlPassword }}
        - name: DATABASE_HOST
          value: {{ template  "postgresql.serviceName" . }}
      - name: init-collectstatic
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        command: ['python', 'manage.py', 'collectstatic', '--noinput']
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
        env:
          - name: DJANGO_SETTINGS_MODULE
            value: backend.settings.prod
          - name: ORG_NAME
            value: {{ .Values.organization.name }}
        volumeMounts:
          - name: statics
            mountPath: /usr/src/app/backend/statics
      volumes:
      {{- range $key, $val := .Values.persistence.volumes }}
      - name: data-{{ $key }}
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}-{{ $key }}
      {{- end }}
      - name: data-servermedias
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}-servermedias
      - name: statics
        emptyDir: {}
      - name: uwsgi
        configMap:
          name: {{ include "substra.fullname" . }}-server-uwsgi
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        configMap:
          name: {{ .Values.privateCa.configMap.name }}
      {{- end }}
      {{ if $.Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        secret:
          secretName: {{ $.Values.orchestrator.tls.secrets.cacert }}
      {{ if $.Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ $.Values.orchestrator.tls.mtls.secrets.pair }}
      {{ end }}
      {{ end }}
    {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
