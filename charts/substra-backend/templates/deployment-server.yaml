apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-server
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-server
    app.kubernetes.io/part-of: {{ template "substra.name" . }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-server
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-server
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- with $.Values.backend.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
      - name: {{ template "substra.name" . }}
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        {{- if .Values.backend.image.pullPolicy }}
        imagePullPolicy: "{{ .Values.backend.image.pullPolicy }}"
        {{- end }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
        command: ["/bin/bash"]
        {{- if eq .Values.backend.settings "prod" }}
        args: ["-c", "uwsgi --http :{{ .Values.backend.service.port }} --module backend.wsgi --static-map /static=/usr/src/app/backend/statics --master --processes {{ .Values.backend.uwsgiProcesses }} --threads {{ .Values.backend.uwsgiThreads }} --http-timeout 300 --socket-timeout 300 --harakiri 300 --need-app --env DJANGO_SETTINGS_MODULE=backend.settings.server.{{ .Values.backend.settings }} "]
        {{- else }}
        args: ["-c", "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- uwsgi --http :{{ .Values.backend.service.port }} --module backend.wsgi --static-map /static=/usr/src/app/backend/statics --master --processes {{ .Values.backend.uwsgiProcesses }} --threads {{ .Values.backend.uwsgiThreads }} --need-app --env DJANGO_SETTINGS_MODULE=backend.settings.server.{{ .Values.backend.settings }}"]
        {{- end }}
        env:
          - name: DJANGO_SETTINGS_MODULE
            value: backend.settings.{{ .Values.backend.settings }}
          - name: BACKEND_ORG
            value: {{ .Values.organization.name }}
          - name: BACKEND_DB_NAME
            value: {{ .Values.postgresql.postgresqlDatabase }}
          - name: BACKEND_DB_USER
            value: {{ .Values.postgresql.postgresqlUsername }}
          - name: BACKEND_DB_PWD
            value: {{ .Values.postgresql.postgresqlPassword }}
          - name: DATABASE_HOST
            value: {{ .Release.Name }}-postgresql
          - name: DEFAULT_DOMAIN
            value: "{{ .Values.backend.defaultDomain }}"
          - name: CELERY_BROKER_URL
            value: "amqp://{{ .Values.rabbitmq.rabbitmq.username }}:{{ .Values.rabbitmq.rabbitmq.password }}@{{ .Release.Name }}-{{ .Values.rabbitmq.host }}:{{ .Values.rabbitmq.port }}//"
          - name: BACKEND_DEFAULT_PORT
            value: {{ .Values.backend.service.port | quote}}
          - name: BACKEND_PEER_PORT
            value: "internal"
          - name: LEDGER_CONFIG_FILE
            value: /conf/{{ .Values.organization.name }}/substra-backend/conf.json
          - name: MEDIA_ROOT
            value: /var/substra/medias/
          - name: PYTHONUNBUFFERED
            value: "1"
          - name: GZIP_MODELS
            value: {{ .Values.backend.gzipModels | quote }}
          {{- if .Values.privateCa.enabled }}
          - name: REQUESTS_CA_BUNDLE
            value: /etc/ssl/certs/ca-certificates.crt
          {{- end }}
        {{- with .Values.extraEnv }}
{{ toYaml . | indent 10 }}
        {{- end }}
        ports:
          - name: http
            containerPort: {{ .Values.backend.service.port }}
            protocol: TCP
        volumeMounts:
          {{- range .Values.persistence.volumes }}
          - name: data-{{ .name }}
            mountPath: /var/substra/medias/{{ .name }}
            readOnly: {{ .readOnly.server }}
          {{- end }}
          - name: data-servermedias
            mountPath: /var/substra/servermedias
            readOnly: true
          - name: statics
            mountPath: /usr/src/app/backend/statics
          - name: config
            mountPath: /conf/{{ .Values.organization.name }}/substra-backend
            readOnly: true
          - name: user-cert
            mountPath: /var/hyperledger/msp/signcerts
          - name: user-key
            mountPath: /var/hyperledger/msp/keystore
          - name: peer-tls-server
            mountPath: /var/hyperledger/tls/server/pair
          - name: peer-tls-client
            mountPath: /var/hyperledger/tls/client/pair
          - name: cacert
            mountPath: /var/hyperledger/ca
          {{- if .Values.privateCa.enabled }}
          - mountPath: /etc/ssl/certs
            name: ssl-certs
          {{- end }}
        livenessProbe:
          httpGet:
            path: /liveness
            port: http
            httpHeaders:
              - name: Accept
                value: "text/html;version=0.0, */*;version=0.0"
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 45
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /readiness
            port: http
            httpHeaders:
              - name: Accept
                value: "text/html;version=0.0, */*;version=0.0"
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 30
        resources:
          {{- toYaml .Values.backend.resources | nindent 12 }}
      initContainers:
      {{- if .Values.privateCa.enabled }}
      - name: add-cert
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - apk add --update ca-certificates openssl && update-ca-certificates && cp /etc/ssl/certs/* /tmp/certs/
        volumeMounts:
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.configMap.fileName }}
          - mountPath: /tmp/certs/
            name: ssl-certs
      {{- end }}
      {{- if and .Values.securityContext.enabled .Values.persistence.hostPath }}
      - name: chown-pvc
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
        - |
          for dir in `ls -d /var/substra/medias/*`; do
            chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }} $dir
          done
        volumeMounts:
          {{- range .Values.persistence.volumes }}
          - name: data-{{ .name }}
            mountPath: /var/substra/medias/{{ .name }}
          {{- end }}
      {{- end }}
      - name: wait-postgresql
        image: jwilder/dockerize
        command: ['dockerize', '-wait', 'tcp://{{ .Release.Name }}-postgresql:5432']
      - name: init-migrate
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        command: ['python', 'manage.py', 'migrate']
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: backend.settings.{{ .Values.backend.settings }}
        - name: BACKEND_ORG
          value: {{ .Values.organization.name }}
        - name: BACKEND_DB_NAME
          value: {{ .Values.postgresql.postgresqlDatabase }}
        - name: BACKEND_DB_USER
          value: {{ .Values.postgresql.postgresqlUsername }}
        - name: BACKEND_DB_PWD
          value: {{ .Values.postgresql.postgresqlPassword }}
        - name: DATABASE_HOST
          value: {{ .Release.Name }}-postgresql
      - name: init-collectstatic
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        command: ['python', 'manage.py', 'collectstatic', '--noinput']
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
        env:
          - name: DJANGO_SETTINGS_MODULE
            value: backend.settings.prod
          - name: BACKEND_ORG
            value: {{ .Values.organization.name }}
        volumeMounts:
          - name: statics
            mountPath: /usr/src/app/backend/statics
      volumes:
      {{- range .Values.persistence.volumes }}
      - name: data-{{ .name }}
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}-{{ .name }}
      {{- end }}
      - name: data-servermedias
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}-servermedias
      - name: statics
        emptyDir: {}
      - name: config
        configMap:
          name: {{ include "substra.fullname" . }}-server
      - name: user-cert
        secret:
          secretName: {{ $.Values.secrets.user.cert }}
      - name: user-key
        secret:
          secretName: {{ $.Values.secrets.user.key }}
      - name: peer-tls-server
        secret:
          secretName: {{ $.Values.secrets.peer.tls.server }}
      - name: peer-tls-client
        secret:
          secretName: {{ $.Values.secrets.peer.tls.client }}
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        configMap:
          name: {{ .Values.privateCa.configMap.name }}
      {{- end }}
      - name: cacert
        secret:
          secretName: {{ $.Values.secrets.caCert }}
    {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
