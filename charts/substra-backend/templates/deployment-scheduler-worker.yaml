{{- if .Values.schedulerWorker.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-scheduler-worker
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler-worker
spec:
  replicas: {{ .Values.schedulerWorker.replicaCount }}
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler-worker
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler-worker
        role-database-client: 'true'
        role-orchestrator-client: 'true'
        role-redis-client: 'true'
        role-registry-client: 'true'
        {{ include "substra.labels" . | nindent 8 }}
      annotations:
        # This will cause the pod to restart if the content of the ConfigMap is updated through Helm
        checksum-cm-orchestrator: {{ include (print $.Template.BasePath "/configmap-orchestrator.yaml") . | sha256sum }}
        checksum-cm-settings: {{ include (print $.Template.BasePath "/configmap-settings.yaml") . | sha256sum }}
        checksum-cm-db: {{ include (print $.Template.BasePath "/configmap-database.yaml") . | sha256sum }}
        checksum-cm-redis: {{ include (print $.Template.BasePath "/configmap-redis.yaml") . | sha256sum }}
        checksum-cm-registry: {{ include (print $.Template.BasePath "/configmap-registry.yaml") . | sha256sum }}
        checksum-secret-database : {{ include (print $.Template.BasePath "/secret-database.yaml") . | sha256sum }}
        checksum-secret-redis : {{ include "substra-backend.redis.secretName" . | sha256sum }}
    spec:
      {{- if .Values.schedulerWorker.podSecurityContext.enabled }}
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        fsGroup: {{ .Values.schedulerWorker.podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.schedulerWorker.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.schedulerWorker.podSecurityContext.runAsGroup }}
      {{- end }}
      {{- with .Values.schedulerWorker.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.worker.rbac.enable }}
      serviceAccountName: {{ template "substra.fullname" . }}-worker
      {{- end }}
      containers:
        - name: scheduler-worker
          image: {{ include "substra-backend.images.name" (dict "img" .Values.schedulerWorker.image "defaultTag" $.Chart.AppVersion) }}
          imagePullPolicy: {{ .Values.schedulerWorker.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
          command: ["/bin/bash"]
          args: ["-c", "celery -A backend worker -l info -n {{ .Values.organizationName }} -Q {{ .Values.organizationName }},scheduler,celery --hostname {{ .Values.organizationName }}.scheduler"]
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
            - configMapRef:
                name: {{ include "substra.fullname" . }}-settings
            - configMapRef:
                name: {{ include "substra.fullname" . }}-database
            - configMapRef:
                name: {{ include "substra.fullname" . }}-redis
            - configMapRef:
                name: {{ include "substra.fullname" . }}-registry
            - secretRef:
                name: {{ include "substra-backend.database.secret-name" . }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.celery.{{ .Values.settings }}
            - name: CELERY_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "substra-backend.redis.secretName" . }}
                  key: {{ include "substra-backend.redis.secretPasswordKey" . }}
          volumeMounts:
            {{- if .Values.privateCa.enabled }}
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            {{- end }}
          resources:
            {{- toYaml .Values.schedulerWorker.resources | nindent 12 }}
      initContainers:
        {{- include "common.addCertInitContainer" . | nindent 8 }}
        {{- include "common.waitRedisInitContainer" . | nindent 8 }}
      volumes:
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        secret:
          secretName: {{ .Values.privateCa.secret.name }}
      {{- end }}
    {{- with .Values.schedulerWorker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.schedulerWorker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.schedulerWorker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- end }}
