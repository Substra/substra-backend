apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-worker
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-worker
spec:
  replicas: {{ .Values.celeryworker.replicaCount }}
  strategy:
    type: {{ .Values.celeryworker.updateStrategy }}
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-worker
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        {{ include "substra.labels" . | nindent 8 }}
        app.kubernetes.io/name: {{ template "substra.name" . }}-worker
        app.kubernetes.io/component: substra-worker
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- if .Values.celeryworker.persistence.servermedias.enableDatasampleStorage }}
      # Run the worker on the same pod as the server.
      # That's necessary because both the worker and the server pods use the servermedias PVC.
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ template "substra.name" . }}-server
            topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- with $.Values.celeryworker.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- if .Values.celeryworker.rbac.enable }}
      serviceAccountName: {{ template "substra.fullname" . }}-worker
      {{- end }}
      initContainers:
      {{- if .Values.privateCa.enabled }}
      - name: add-cert
        image: {{ .Values.privateCa.image.repository }}
        imagePullPolicy: {{ .Values.privateCa.image.pullPolicy }}
        command: ['sh', '-c']
        args:
        - |
          {{- if .Values.privateCa.image.apkAdd }}
          apk add --update ca-certificates openssl
          {{- end }}
          update-ca-certificates && cp /etc/ssl/certs/* /tmp/certs/
        volumeMounts:
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.configMap.fileName }}
          - mountPath: /tmp/certs/
            name: ssl-certs
      {{- end }}
      {{- if and .Values.securityContext.enabled .Values.celeryworker.persistence.hostPath }}
      - name: chown-pvc
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
        - |
          for dir in `ls -d /var/substra/medias/*`; do
            chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }} $dir
          done
        volumeMounts:
          {{- range $key, $val := .Values.celeryworker.persistence.volumes }}
          - name: data-{{ $key }}
            mountPath: /var/substra/medias/{{ $key }}
          {{- end }}
      {{- end }}
      - name: wait-postgresql
        image: jwilder/dockerize
        command: ['dockerize', '-wait', 'tcp://{{ .Release.Name }}-postgresql:5432']
      - name: wait-minio
        image: jwilder/dockerize
        command: ['dockerize', '-wait', 'tcp://{{ .Release.Name }}-minio:9000']
      containers:
        - name: worker
          image: "{{ .Values.celeryworker.image.repository }}:{{ .Values.celeryworker.image.tag }}"
          {{- if .Values.celeryworker.image.pullPolicy }}
          imagePullPolicy: "{{ .Values.celeryworker.image.pullPolicy }}"
          {{- end }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
          {{- end }}
          command: ["/bin/bash"]
          {{- if eq .Values.backend.settings "prod" }}
          args: ["-c", "celery -A backend worker -E -l info -n {{ .Values.organization.name }} -Q {{ .Values.organization.name }},{{ .Values.organization.name }}.worker,celery --hostname {{ .Values.organization.name }}.worker"]
          {{ else }}
          args: ["-c", "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A backend worker -E -l info -n {{ .Values.organization.name }} -Q {{ .Values.organization.name }},{{ .Values.organization.name }}.worker,celery --hostname {{ .Values.organization.name }}.worker"]
          {{ end }}
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-ledger
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
            - secretRef:
                name: {{ include "substra.fullname" . }}-objectstore
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.celery.{{ .Values.backend.settings }}
            - name: ORG_NAME
              value: {{ .Values.organization.name }}
            - name: BACKEND_DB_NAME
              value: {{ .Values.postgresql.postgresqlDatabase }}
            - name: BACKEND_DB_USER
              value: {{ .Values.postgresql.postgresqlUsername }}
            - name: BACKEND_DB_PWD
              value: {{ .Values.postgresql.postgresqlPassword }}
            - name: DATABASE_HOST
              value: {{ template  "postgresql.serviceName" . }}
            - name: DEFAULT_DOMAIN
              value: "{{ .Values.backend.defaultDomain }}"
            - name: CELERY_BROKER_URL
              value: "amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@{{ default (include  "rabbitmq.serviceName" .) .Values.rabbitmq.host }}:{{ .Values.rabbitmq.port }}//"
            - name: MEDIA_ROOT
              value: /var/substra/medias/
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: "CELERY_WORKER_CONCURRENCY"
              value: {{ .Values.celeryworker.concurrency | quote }}
            - name: WORKER_PVC_DOCKER_CACHE
              value: {{ include "substra.fullname" $ }}-docker-cache
            - name: WORKER_PVC_SUBTUPLE
              value: {{ include "substra.fullname" $ }}-subtuple
            {{- if .Values.privateCa.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: /etc/ssl/certs/ca-certificates.crt
            {{- end }}
            {{- if .Values.registry.local }}
            - name: REGISTRY
              value: {{ .Release.Name }}-docker-registry:5000
            {{ else }}
            - name: REGISTRY
              value: {{ .Values.registry.host}}:{{ .Values.registry.port}}
            {{ end }}
            - name: REGISTRY_IS_LOCAL
              value: "{{ $.Values.registry.local }}"
            - name: REGISTRY_SERVICE_NAME
              value: {{ .Release.Name }}-docker-registry
            - name: REGISTRY_SCHEME
              value: {{ .Values.registry.scheme}}
            - name: REGISTRY_PULL_DOMAIN
              value: {{ .Values.registry.pullDomain}}
            - name: NAMESPACE
              value: {{ .Release.Namespace }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: RUN_AS_USER
              value: {{ .Values.securityContext.runAsUser | quote}}
            - name: RUN_AS_GROUP
              value: {{ .Values.securityContext.runAsGroup | quote }}
            - name: FS_GROUP
              value: {{ .Values.securityContext.fsGroup | quote }}
            - name: KANIKO_IMAGE
              value: {{ .Values.backend.kaniko.image | quote }}
            - name: KANIKO_MIRROR
              value: {{ .Values.backend.kaniko.mirror | quote }}
            - name: KANIKO_DOCKER_CONFIG_SECRET_NAME
              value: {{ .Values.backend.kaniko.dockerConfigSecretName | quote  }}
            - name: COMPUTE_REGISTRY
              value: {{ .Values.backend.compute.registry | quote }}
            - name: COMPUTE_POD_MAX_STARTUP_WAIT_SECONDS
              value: {{ .Values.backend.compute.podMaxStartupWaitSeconds | quote }}
            - name: HTTP_CLIENT_TIMEOUT_SECONDS
              value: {{ .Values.httpClient.timeoutSeconds | quote  }}
            - name: OBJECTSTORE_URL
              value: {{ .Release.Name }}-minio:9000
            - name: ENABLE_DATASAMPLE_STORAGE_IN_SERVERMEDIAS
              value: {{ .Values.celeryworker.persistence.servermedias.enableDatasampleStorage | quote }}
          {{- with .Values.extraEnv }}
{{ toYaml . | indent 12 }}
          {{- end }}
          volumeMounts:
            {{- range $key, $val := .Values.celeryworker.persistence.volumes }}
            - name: data-{{ $key }}
              mountPath: /var/substra/medias/{{ $key }}
            {{- end }}
            {{- if .Values.celeryworker.persistence.servermedias.enableDatasampleStorage }}
            - name: data-servermedias
              mountPath: /var/substra/servermedias
              readOnly: true
            {{- end }}
            {{- if .Values.privateCa.enabled }}
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            {{- end }}
            {{ if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-cacert
              mountPath: /var/substra/orchestrator/tls/server
            {{ if $.Values.orchestrator.tls.mtls.enabled }}
            - name: orchestrator-tls-client-pair
              mountPath: /var/substra/orchestrator/tls/client
            {{ end }}
            {{ end }}
          resources:
            {{- toYaml .Values.celeryworker.resources | nindent 12 }}
      volumes:
      {{- range $key, $val := .Values.celeryworker.persistence.volumes }}
      - name: data-{{ $key }}
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}-{{ $key }}
      {{- end }}
      {{- if .Values.celeryworker.persistence.servermedias.enableDatasampleStorage }}
      - name: data-servermedias
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}-servermedias
      {{- end }}
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        configMap:
          name: {{ .Values.privateCa.configMap.name }}
      {{- end }}
      {{ if $.Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        secret:
          secretName: {{ $.Values.orchestrator.tls.secrets.cacert }}
      {{ if $.Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ $.Values.orchestrator.tls.mtls.secrets.pair }}
      {{ end }}
      {{ end }}
    {{- with .Values.celeryworker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celeryworker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celeryworker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
