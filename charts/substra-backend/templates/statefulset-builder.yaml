{{- if .Values.builder.enabled }}
## Headless service doesn't get its own file
apiVersion: v1
kind: Service
metadata:
  name: {{ template "substra.fullname" . }}-builder
  labels:
    {{- include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-builder
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/component: substra-builder
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "substra.fullname" . }}-builder
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-builder
spec:
  replicas: {{ .Values.builder.replicaCount }}
  serviceName: {{ template "substra.fullname" . }}-builder
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-builder
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-builder
        {{ include "substra.labels" . | nindent 8 }}
        app.kubernetes.io/component: substra-builder
        role-database-client: 'true'
        role-redis-client: 'true'
        role-registry-client: 'true'
      annotations:
        # This will cause the pod to restart if the content of the ConfigMap is updated through Helm
        checksum-cm-orchestrator: {{ include (print $.Template.BasePath "/configmap-orchestrator.yaml") . | sha256sum }}
        checksum-cm-settings: {{ include (print $.Template.BasePath "/configmap-settings.yaml") . | sha256sum }}
        checksum-secret-objectstore : {{ include (print $.Template.BasePath "/secret-objectstore.yaml") . | sha256sum }}
        checksum-secret-redis: {{ include (print $.Template.BasePath "/secret-redis.yaml") . | sha256sum }}
    spec:
      {{- if .Values.builder.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.builder.podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.builder.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.builder.podSecurityContext.runAsGroup }}
      {{- end }}
      {{- with .Values.builder.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "substra.fullname" . }}-builder
      initContainers:
      {{- include "common.waitPostgresqlInitContainer" . | nindent 6 }}
      {{- if .Values.privateCa.enabled }}
      - name: add-cert
        image: {{ include "common.images.name" .Values.privateCa.image }}
        imagePullPolicy: {{ .Values.privateCa.image.pullPolicy }}
        securityContext:
          runAsUser: 0
        command: ['sh', '-c']
        args:
        - |
          {{- if .Values.privateCa.image.apkAdd }}
          apt update
          apt install -y ca-certificates openssl
          {{- end }}
          update-ca-certificates && cp /etc/ssl/certs/* /tmp/certs/
        volumeMounts:
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.secret.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.secret.fileName }}
          - mountPath: /tmp/certs/
            name: ssl-certs
      {{- end }}
      {{- include "common.waitMinIOContainer" . | nindent 6 }}
      {{- if .Values.kaniko.cache.warmer.cachedImages }}
      - name: kaniko-cache-warmer
        image: {{ include "common.images.name" .Values.kaniko.cache.warmer.image }}
        args:
        - "--cache-dir=/cache"
        {{- range .Values.kaniko.cache.warmer.cachedImages }}
        - "--image={{ . }}"
        {{- end }}
        - "--verbosity=debug"
        volumeMounts:
          - name: docker-cache
            mountPath: /cache
            readOnly: False
          {{- if .Values.kaniko.dockerConfigSecretName }}
          - name: docker-config
            mountPath: /kaniko/.docker
          {{- end }}
      {{- end }}
      containers:
      - name: builder
        image: {{ include "substra-backend.images.name" (dict "img" .Values.builder.image "defaultTag" $.Chart.AppVersion) }}
        imagePullPolicy: "{{ .Values.builder.image.pullPolicy }}"
        command: ["/bin/bash", "-c"]
        {{- if eq .Values.settings "prod" }}
        args: ["celery -A backend worker -E -l info -Q {{ .Values.organizationName }}.builder,{{ .Values.organizationName }}.builder-${HOSTNAME##*-},{{ .Values.organizationName }}.broadcast --hostname {{ .Values.organizationName }}.builder-${HOSTNAME##*-}"]
        {{ else }}
        args: ["watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A backend worker -E -l info -Q {{ .Values.organizationName }}.builder,{{ .Values.organizationName }}.builder-${HOSTNAME##*-},{{ .Values.organizationName }}.broadcast --hostname {{ .Values.organizationName }}.builder-${HOSTNAME##*-}"]
        {{ end }}
        envFrom:
          # TODO: Remove dependency for LDEGER_MSP_ID
          - configMapRef:
              name: {{ include "substra.fullname" . }}-orchestrator
          - configMapRef:
              name: {{ include "substra.fullname" . }}-settings
          - configMapRef:
              name: {{ include "substra.fullname" . }}-redis
          - configMapRef:
              name: {{ include "substra.fullname" . }}-registry
          # TODO: Remove once moved ImageResitryEntrypoint logic
          - configMapRef:
                name: {{ include "substra.fullname" . }}-database
          - secretRef:
              name: {{ include "substra.fullname" . }}-objectstore
          - secretRef:
              name: {{ include "substra.fullname" . }}-redis
          # TODO: Remove once moved ImageResitryEntrypoint logic
          - secretRef:
                name: {{ include "substra-backend.database.secret-name" . }}
        env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: DJANGO_SETTINGS_MODULE
            value: backend.settings.celery.{{ .Values.settings }}
          - name: DEFAULT_DOMAIN
            value: "{{ .Values.server.defaultDomain }}"
          - name: "CELERY_WORKER_CONCURRENCY"
            value: {{ .Values.builder.concurrency | quote }}
          - name: WORKER_PVC_DOCKER_CACHE
            value: docker-cache
          - name: WORKER_PVC_SUBTUPLE
            value: subtuple
          - name: PRIVATE_CA_ENABLED
            value: {{ .Values.privateCa.enabled | quote }}
          {{- if .Values.privateCa.enabled }}
          - name: REQUESTS_CA_BUNDLE
            value: /etc/ssl/certs/ca-certificates.crt
          {{- end }}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: KANIKO_DOCKER_CONFIG_SECRET_NAME
            value: {{ .Values.kaniko.dockerConfigSecretName | quote }}
          - name: OBJECTSTORE_URL
            value: {{ include "substra-backend.objectStore.url" . | quote }}
          - name: KANIKO_RESOURCES
            value: {{ toYaml .Values.kaniko.resources | quote }}
        ports:
          - name: http
            containerPort: 8000
            protocol: TCP
        volumeMounts:
          - name: subtuple
            mountPath: /var/substra/medias/subtuple
          {{- if .Values.privateCa.enabled }}
          - mountPath: /etc/ssl/certs
            name: ssl-certs
          {{- end }}
          {{ if .Values.orchestrator.tls.enabled }}
          - name: orchestrator-tls-cacert
            mountPath: /var/substra/orchestrator/tls/server
          {{ if .Values.orchestrator.tls.mtls.enabled }}
          - name: orchestrator-tls-client-pair
            mountPath: /var/substra/orchestrator/tls/client
          {{ end }}
          {{ end }}
        resources:
          {{- toYaml .Values.builder.resources | nindent 12 }}
      volumes:
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        secret:
          secretName: {{ .Values.privateCa.secret.name }}
      {{- end }}
      {{ if .Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        secret:
          secretName: {{ .Values.orchestrator.tls.cacert }}
      {{ if .Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ .Values.orchestrator.tls.mtls.clientCertificate }}
      {{ end }}
      {{ end }}
      {{- if .Values.kaniko.dockerConfigSecretName }}
      - name: docker-config
        secret:
          secretName: {{ .Values.kaniko.dockerConfigSecretName }}
          items:
            - key: .dockerconfigjson
              path: config.json
      {{- end }}
    {{- with .Values.builder.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.builder.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.builder.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: subtuple
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{ include "common.storage.class" .Values.builder.persistence }}
      resources:
        requests:
          storage: {{ .Values.builder.persistence.size }}
  - metadata:
      name: docker-cache
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{ include "common.storage.class" .Values.kaniko.cache.persistence }}
      resources:
        requests:
          storage: {{ .Values.kaniko.cache.persistence.size }}
{{- end }}
