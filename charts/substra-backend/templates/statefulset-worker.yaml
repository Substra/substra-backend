{{- if .Values.worker.enabled }}
## Headless service doesn't get its own file
apiVersion: v1
kind: Service
metadata:
  name: {{ template "substra.fullname" . }}-worker
  labels:
    {{- include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-worker
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/component: substra-worker
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "substra.fullname" . }}-worker
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-worker
spec:
  replicas: {{ .Values.worker.replicaCount }}
  serviceName: {{ template "substra.fullname" . }}-worker
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-worker
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        {{ include "substra.labels" . | nindent 8 }}
        app.kubernetes.io/name: {{ template "substra.name" . }}-worker
        app.kubernetes.io/component: substra-worker
        role-api-k8s-client: 'true'
        role-database-client: 'true'
        # Needed for downloading models from other backends + connecting to remote registry
        role-internet-egress: 'true'
        role-server-client: 'true'
        role-orchestrator-client: 'true'
        role-redis-client: 'true'
        role-registry-client: 'true'
        role-storage-client: 'true'
      annotations:
        # This will cause the pod to restart if the content of the ConfigMap is updated through Helm
        checksum-cm-orchestrator: {{ include (print $.Template.BasePath "/configmap-orchestrator.yaml") . | sha256sum }}
        checksum-cm-settings: {{ include (print $.Template.BasePath "/configmap-settings.yaml") . | sha256sum }}
        checksum-cm-db: {{ include (print $.Template.BasePath "/configmap-database.yaml") . | sha256sum }}
        checksum-cm-registry: {{ include (print $.Template.BasePath "/configmap-registry.yaml") . | sha256sum }}
        checksum-cm-redis: {{ include (print $.Template.BasePath "/configmap-redis.yaml") . | sha256sum }}
        checksum-secret-objectstore : {{ include (print $.Template.BasePath "/secret-objectstore.yaml") . | sha256sum }}
        checksum-secret-database : {{ include (print $.Template.BasePath "/secret-database.yaml") . | sha256sum }}
        checksum-secret-redis : {{ include (print $.Template.BasePath "/secret-redis.yaml") . | sha256sum }}
    spec:
      {{- if .Values.worker.podSecurityContext.enabled }}
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        runAsUser: {{ .Values.worker.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.worker.podSecurityContext.runAsGroup }}
        fsGroup: {{ .Values.worker.podSecurityContext.fsGroup }}
      {{- end }}
      {{- with .Values.worker.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.worker.rbac.create }}
      serviceAccountName: {{ template "substra.fullname" . }}-worker
      {{- end }}
      initContainers:
      {{- include "common.addCertInitContainer" . | nindent 6 }}
      {{- include "common.waitPostgresqlInitContainer" . | nindent 6 }}
      {{- include "common.waitMinIOContainer" . | nindent 6}}
      containers:
        - name: worker
          image: {{ include "substra-backend.images.name" (dict "img" .Values.worker.image "defaultTag" $.Chart.AppVersion) }}
          imagePullPolicy: "{{ .Values.worker.image.pullPolicy }}"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ["ALL"]
          command: ["/bin/bash"]
          {{- if eq .Values.settings "prod" }}
          args: ["-c", "celery -A backend worker -E -l info -Q {{ .Values.organizationName }}.worker,{{ .Values.organizationName }}.worker-${HOSTNAME##*-},{{ .Values.organizationName }}.broadcast,celery --hostname {{ .Values.organizationName }}.worker-${HOSTNAME##*-}"]
          {{ else }}
          args: ["-c", "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A backend worker -E -l info -Q {{ .Values.organizationName }}.worker,{{ .Values.organizationName }}.worker-${HOSTNAME##*-},{{ .Values.organizationName }}.broadcast,celery --hostname {{ .Values.organizationName }}.worker-${HOSTNAME##*-}"]
          {{ end }}
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
            - configMapRef:
                name: {{ include "substra.fullname" . }}-settings
            - configMapRef:
                name: {{ include "substra.fullname" . }}-database
            - configMapRef:
                name: {{ include "substra.fullname" . }}-redis
            - configMapRef:
                name: {{ include "substra.fullname" . }}-registry
            - secretRef:
                name: {{ include "substra.fullname" . }}-objectstore
            - secretRef:
                name: {{ include "substra.fullname" . }}-redis
            - secretRef:
                name: {{ include "substra-backend.database.secret-name" . }}
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.celery.{{ .Values.settings }}
            - name: DEFAULT_DOMAIN
              value: "{{ .Values.server.defaultDomain }}"
            - name: "CELERY_WORKER_CONCURRENCY"
              value: {{ .Values.worker.concurrency | quote }}
            - name: WORKER_PVC_SUBTUPLE
              value: subtuple
            {{- if .Values.privateCa.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: /etc/ssl/certs/ca-certificates.crt
            {{- end }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: COMPUTE_POD_RESOURCES
              value: {{ toYaml .Values.worker.computePod.resources | quote }}
            - name: COMPUTE_POD_MAX_STARTUP_WAIT_SECONDS
              value: {{ .Values.worker.computePod.maxStartupWaitSeconds | quote }}
            - name: OBJECTSTORE_URL
              value: {{ include "substra-backend.objectStore.url" . | quote }}
            - name: ENABLE_DATASAMPLE_STORAGE_IN_SERVERMEDIAS
              value: {{ .Values.DataSampleStorageInServerMedia | quote }}
            {{- if .Values.kaniko.dockerConfigSecretName }}
            - name: DOCKER_CONFIG_SECRET_NAME
              value: {{ .Values.kaniko.dockerConfigSecretName }}
            {{- end }}
          {{- with .Values.extraEnv }}
{{ toYaml . | indent 12 }}
          {{- end }}
          volumeMounts:
            - name: subtuple
              mountPath: /var/substra/medias/subtuple
            {{- if .Values.DataSampleStorageInServerMedia }}
            - name: data-servermedias
              mountPath: /var/substra/servermedias
            {{- end }}
            {{- if .Values.privateCa.enabled }}
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            {{- end }}
            {{ if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-cacert
              mountPath: /var/substra/orchestrator/tls/server
            {{ if $.Values.orchestrator.tls.mtls.enabled }}
            - name: orchestrator-tls-client-pair
              mountPath: /var/substra/orchestrator/tls/client
            {{ end }}
            {{ end }}
            {{- if .Values.kaniko.dockerConfigSecretName }}
            - name: docker-config
              mountPath: /.docker
            {{- end }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
      volumes:
      {{- if .Values.DataSampleStorageInServerMedia  }}
      - name: data-servermedias
        persistentVolumeClaim:
          claimName: {{ .Values.server.persistence.servermedias.existingClaim | default (print (include "substra.fullname" $) "-servermedias") }}
      {{- end }}
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        secret:
          secretName: {{ .Values.privateCa.secret.name }}
      {{- end }}
      {{ if .Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        secret:
          secretName: {{ .Values.orchestrator.tls.cacert }}
      {{ if .Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ .Values.orchestrator.tls.mtls.clientCertificate }}
      {{ end }}
      {{ end }}
      {{- if .Values.kaniko.dockerConfigSecretName }}
      - name: docker-config
        secret:
          secretName: {{ .Values.kaniko.dockerConfigSecretName }}
          items:
            - key: .dockerconfigjson
              path: config.json
      {{- end }}
    {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.DataSampleStorageInServerMedia}}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ template "substra.name" . }}-server
            topologyKey: kubernetes.io/hostname
    {{- else }}
    {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- end }}
    {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: subtuple
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{ include "common.storage.class" .Values.worker.persistence }}
      resources:
        requests:
          storage: {{ .Values.worker.persistence.size }}
{{- end }}
