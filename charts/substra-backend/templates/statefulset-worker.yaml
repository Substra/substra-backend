## Headless service doesn't get its own file
apiVersion: v1
kind: Service
metadata:
  name: {{ template "substra.fullname" . }}-worker
  labels:
    {{- include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-worker
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/component: substra-worker
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "substra.fullname" . }}-worker
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-worker
spec:
  replicas: {{ .Values.worker.replicaCount }}
  serviceName: {{ template "substra.fullname" . }}-worker
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-worker
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        {{ include "substra.labels" . | nindent 8 }}
        app.kubernetes.io/name: {{ template "substra.name" . }}-worker
        app.kubernetes.io/component: substra-worker
    spec:
      {{- if .Values.worker.podSecurityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.worker.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.worker.podSecurityContext.runAsGroup }}
        fsGroup: {{ .Values.worker.podSecurityContext.fsGroup }}
      {{- end }}
      {{- with .Values.worker.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- if .Values.worker.rbac.enable }}
      serviceAccountName: {{ template "substra.fullname" . }}-worker
      {{- end }}
      initContainers:
      {{- if .Values.privateCa.enabled }}
      - name: add-cert
        image: {{ .Values.privateCa.image.repository }}
        imagePullPolicy: {{ .Values.privateCa.image.pullPolicy }}
        securityContext:
          runAsUser: 0
        command: ['sh', '-c']
        args:
        - |
          {{- if .Values.privateCa.image.apkAdd }}
          apt update
          apt install -y ca-certificates openssl
          {{- end }}
          update-ca-certificates && cp /etc/ssl/certs/* /tmp/certs/
        volumeMounts:
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.configMap.fileName }}
          - mountPath: /tmp/certs/
            name: ssl-certs
      {{- end }}
      {{- if .Values.kaniko.cache.warmer.cachedImages }}
      - name: kaniko-cache-warmer
        image: {{ include "common.images.name" .Values.kaniko.cache.warmer.image }}
        args:
        - "--cache-dir=/cache"
        {{- range .Values.kaniko.cache.warmer.cachedImages }}
        - "--image={{ . }}"
        {{- end }}
        - "--verbosity=debug"
        volumeMounts:
          - name: docker-cache
            mountPath: /cache
            readOnly: False
          {{- if .Values.kaniko.dockerConfigSecretName }}
          - name: docker-config
            mountPath: /kaniko/.docker
          {{- end }}
      {{- end}}
      - name: wait-postgresql
        image: jwilder/dockerize:0.6.1
        command: ['dockerize', '-wait', 'tcp://{{ template  "postgresql.serviceName" . }}:5432']
      - name: wait-minio
        image: jwilder/dockerize:0.6.1
        command: ['dockerize', '-wait', 'tcp://{{ .Release.Name }}-minio:9000']
      containers:
        - name: worker
          image: {{ include "common.images.name" .Values.worker.image }}
          imagePullPolicy: "{{ .Values.worker.image.pullPolicy }}"
          command: ["/bin/bash"]
          {{- if eq .Values.settings "prod" }}
          args: ["-c", "celery -A backend worker -E -l info -Q {{ .Values.organizationName }}.worker,{{ .Values.organizationName }}.worker-${HOSTNAME##*-},{{ .Values.organizationName }}.broadcast,celery --hostname {{ .Values.organizationName }}.worker-${HOSTNAME##*-}"]
          {{ else }}
          args: ["-c", "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A backend worker -E -l info -Q {{ .Values.organizationName }}.worker,{{ .Values.organizationName }}.worker-${HOSTNAME##*-},{{ .Values.organizationName }}.broadcast,celery --hostname {{ .Values.organizationName }}.worker-${HOSTNAME##*-}"]
          {{ end }}
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
            - configMapRef:
                name: {{ include "substra.fullname" . }}-settings
            - configMapRef:
                name: {{ include "substra.fullname" . }}-database
            - configMapRef:
                name: {{ include "substra.fullname" . }}-rabbitmq
            - configMapRef:
                name: {{ include "substra.fullname" . }}-registry
            - secretRef:
                name: {{ include "substra.fullname" . }}-objectstore
            - secretRef:
                name: {{ include "substra.fullname" . }}-rabbitmq
            - secretRef:
                name: {{ include "substra.fullname" . }}-database
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.celery.{{ .Values.settings }}
            - name: DEFAULT_DOMAIN
              value: "{{ .Values.server.defaultDomain }}"
            - name: "CELERY_WORKER_CONCURRENCY"
              value: {{ .Values.worker.concurrency | quote }}
            - name: WORKER_PVC_DOCKER_CACHE
              value: docker-cache
            - name: WORKER_PVC_SUBTUPLE
              value: subtuple
            {{- if .Values.privateCa.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: /etc/ssl/certs/ca-certificates.crt
            {{- end }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KANIKO_DOCKER_CONFIG_SECRET_NAME
              value: {{ .Values.kaniko.dockerConfigSecretName | quote  }}
            - name: COMPUTE_POD_MAX_STARTUP_WAIT_SECONDS
              value: {{ .Values.worker.computePod.maxStartupWaitSeconds | quote }}
            - name: OBJECTSTORE_URL
              value: {{ .Release.Name }}-minio:9000
            - name: ENABLE_DATASAMPLE_STORAGE_IN_SERVERMEDIAS
              value: {{ .Values.DataSampleStorageInServerMedia | quote }}
          {{- with .Values.extraEnv }}
{{ toYaml . | indent 12 }}
          {{- end }}
          volumeMounts:
            - name: subtuple
              mountPath: /var/substra/medias/subtuple
            {{- if .Values.DataSampleStorageInServerMedia }}
            - name: data-servermedias
              mountPath: /var/substra/servermedias
            {{- end }}
            {{- if .Values.privateCa.enabled }}
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            {{- end }}
            {{ if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-cacert
              mountPath: /var/substra/orchestrator/tls/server
            {{ if $.Values.orchestrator.tls.mtls.enabled }}
            - name: orchestrator-tls-client-pair
              mountPath: /var/substra/orchestrator/tls/client
            {{ end }}
            {{ end }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
      volumes:
      {{- if .Values.DataSampleStorageInServerMedia  }}
      - name: data-servermedias
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}-servermedias
      {{- end }}
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        configMap:
          name: {{ .Values.privateCa.configMap.name }}
      {{- end }}
      {{ if .Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        configMap:
          name: {{ .Values.orchestrator.tls.cacert }}
      {{ if .Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ .Values.orchestrator.tls.mtls.clientCertificate }}
      {{ end }}
      {{ end }}
      {{- if .Values.kaniko.dockerConfigSecretName }}
      - name: docker-config
        secret:
          secretName: {{ .Values.kaniko.dockerConfigSecretName }}
          items:
          - key: .dockerconfigjson
            path: config.json
      {{- end }}
    {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.DataSampleStorageInServerMedia}}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ template "substra.name" . }}-server
            topologyKey: kubernetes.io/hostname
    {{- else }}
    {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- end }}
    {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: subtuple
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{ include "common.storage.class" .Values.worker.persistence }}
      resources:
        requests:
          storage: {{ .Values.worker.persistence.size }}
  - metadata:
      name: docker-cache
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{ include "common.storage.class" .Values.kaniko.cache.persistence }}
      resources:
        requests:
          storage: {{ .Values.kaniko.cache.persistence.size }}
