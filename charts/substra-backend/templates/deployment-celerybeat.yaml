apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-celerybeat
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-celerybeat
spec:
  replicas: {{ .Values.celerybeat.replicaCount }}
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-celerybeat
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        {{ include "substra.labels" . | nindent 8 }}
        app.kubernetes.io/name: {{ template "substra.name" . }}-celerybeat
    spec:
      {{- with $.Values.celerybeat.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
        - name: celerybeat
          image: "{{ .Values.celerybeat.image.repository }}:{{ .Values.celerybeat.image.tag }}"
          {{- if .Values.celerybeat.image.pullPolicy }}
          imagePullPolicy: "{{ .Values.celerybeat.image.pullPolicy }}"
          {{- end }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
          {{- end }}
          command: ["/bin/bash"]
          {{- if eq .Values.backend.settings "prod" }}
          args: ["-c", "celery -A backend beat -l debug"]
          {{ else }}
          args: ["-c", "celery -A backend beat -l debug"]
          {{ end }}
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-ledger
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.celery.{{ .Values.backend.settings }}
            - name: ORG_NAME
              value: {{ .Values.organization.name }}
            - name: BACKEND_DB_NAME
              value: {{ .Values.postgresql.postgresqlDatabase }}
            - name: BACKEND_DB_USER
              value: {{ .Values.postgresql.postgresqlUsername }}
            - name: BACKEND_DB_PWD
              value: {{ .Values.postgresql.postgresqlPassword }}
            - name: DATABASE_HOST
              value: {{ template  "postgresql.serviceName" . }}
            - name: CELERY_BROKER_URL
              value: "amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@{{ default (include  "rabbitmq.serviceName" .) .Values.rabbitmq.host }}:{{ .Values.rabbitmq.port }}//"
            - name: SCHEDULE_TASK_PERIOD
              value: "{{ .Values.celerybeat.taskPeriod }}"
            - name: FLUSH_EXPIRED_TOKENS_TASK_PERIOD
              value: "{{ .Values.celerybeat.expiredTokensFlushPeriod }}"
            - name: MAXIMUM_IMAGES_TTL
              value: "{{ .Values.celerybeat.maximumImagesTTL }}"
            - name: PYTHONUNBUFFERED
              value: "1"
            {{- if .Values.registry.local }}
            - name: REGISTRY
              value: {{ .Release.Name }}-docker-registry:5000
            {{ else }}
            - name: REGISTRY
              value: {{ .Values.registry.host}}:{{ .Values.registry.port}}
            {{ end }}
            - name: REGISTRY_IS_LOCAL
              value: "{{ $.Values.registry.local }}"
            - name: REGISTRY_SERVICE_NAME
              value: {{ .Release.Name }}-docker-registry
            - name: REGISTRY_SCHEME
              value: {{ .Values.registry.scheme}}
            - name: REGISTRY_PULL_DOMAIN
              value: {{ .Values.registry.pullDomain}}
            - name: NAMESPACE
              value: {{ .Release.Namespace }}
            - name: DOCKER_CACHE_PVC
              value: {{ include "substra.fullname" $ }}-docker-cache
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: RUN_AS_USER
              value: {{ .Values.securityContext.runAsUser | quote}}
            - name: RUN_AS_GROUP
              value: {{ .Values.securityContext.runAsGroup | quote }}
            - name: FS_GROUP
              value: {{ .Values.securityContext.fsGroup | quote }}
            - name: KANIKO_IMAGE
              value: {{ .Values.backend.kaniko.image | quote }}
            - name: KANIKO_MIRROR
              value: {{ .Values.backend.kaniko.mirror | quote }}
            - name: COMPUTE_REGISTRY
              value: {{ .Values.backend.compute.registry | quote }}
            - name: HTTP_CLIENT_TIMEOUT_SECONDS
              value: {{ .Values.httpClient.timeoutSeconds | quote  }}
          volumeMounts:
            {{ if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-cacert
              mountPath: /var/substra/orchestrator/tls/server
            {{ if $.Values.orchestrator.tls.mtls.enabled }}
            - name: orchestrator-tls-client-pair
              mountPath: /var/substra/orchestrator/tls/client
            {{ end }}
            {{ end }}
          resources:
            {{- toYaml .Values.celerybeat.resources | nindent 12 }}
      volumes:
      {{ if $.Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        secret:
          secretName: {{ $.Values.orchestrator.tls.secrets.cacert }}
      {{ if $.Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ $.Values.orchestrator.tls.mtls.secrets.pair }}
      {{ end }}
      {{ end }}
    {{- with .Values.celerybeat.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celerybeat.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celerybeat.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
