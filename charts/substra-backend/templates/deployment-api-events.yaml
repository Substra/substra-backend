{{- if .Values.api.events.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-api-events
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-api-events
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-api-events
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-api-events
        role-redis-client: 'true'
        role-database-client: 'true'
        role-orchestrator-client: 'true'
        {{ include "substra.labels" . | nindent 8 }}
      annotations:
        # This will cause the pod to restart if the content of the ConfigMap is updated through Helm
        checksum-cm-orchestrator: {{ include (print $.Template.BasePath "/configmap-orchestrator.yaml") . | sha256sum }}
        checksum-cm-settings: {{ include (print $.Template.BasePath "/configmap-settings.yaml") . | sha256sum }}
        checksum-cm-db: {{ include (print $.Template.BasePath "/configmap-database.yaml") . | sha256sum }}
        checksum-cm-redis: {{ include (print $.Template.BasePath "/configmap-redis.yaml") . | sha256sum }}
        checksum-secret-database : {{ include (print $.Template.BasePath "/secret-database.yaml") . | sha256sum }}
        checksum-secret-redis: {{ include (print $.Template.BasePath "/secret-redis.yaml") . | sha256sum }}
    spec:
      {{- with .Values.api.events.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.api.events.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.api.events.podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.api.events.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.api.events.podSecurityContext.runAsGroup }}
      {{- end }}
      serviceAccountName: {{ include "substra.api.events.serviceAccountName" . }}
      containers:
        - name: api-event-app
          image: {{ include "substra-backend.images.name" (dict "img" .Values.api.events.image "defaultTag" $.Chart.AppVersion) }}
          imagePullPolicy: {{ .Values.api.events.image.pullPolicy }}
          resources:
            {{- toYaml .Values.api.events.resources | nindent 12 }}
          command: ["/bin/bash"]
          {{- if eq .Values.settings "prod" }}
          args: ["-c", "python manage.py consume"]
          {{- else }}
          args: ["-c", "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- python manage.py consume"]
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
            - configMapRef:
                name: {{ include "substra.fullname" . }}-settings
            - configMapRef:
                name: {{ include "substra.fullname" . }}-database
            - configMapRef:
                name: {{ include "substra.fullname" . }}-redis
            - secretRef:
                name: {{ include "substra.fullname" . }}-redis
            - secretRef:
                name: {{ include "substra-backend.database.secret-name" . }}
          readinessProbe:
            exec:
              command:
              - cat
              - /tmp/ready
            initialDelaySeconds: 5
            periodSeconds: 20
          env:
            - name: NAMESPACE
              valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.api.events.{{ .Values.settings }}
          volumeMounts:
            {{- if .Values.privateCa.enabled }}
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            {{- end }}
            {{ if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-cacert
              mountPath: /var/substra/orchestrator/tls/server
            {{ if $.Values.orchestrator.tls.mtls.enabled }}
            - name: orchestrator-tls-client-pair
              mountPath: /var/substra/orchestrator/tls/client
            {{ end }}
            {{ end }}
      initContainers:
        {{- include "common.addCertInitContainer" . | nindent 8 }}
        {{- include "common.waitPostgresqlInitContainer" . | nindent 8 }}
        {{- include "common.waitInitMigrationsInitContainer" . | nindent 8}}
      volumes:
      - name: volume-wait-init-migrations
        configMap:
          name: {{ include "substra.fullname" . }}-wait-init-migrations
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        secret:
         secretName: {{ .Values.privateCa.secret.name }}
      {{- end }}
      {{ if $.Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        secret:
          secretName: {{ $.Values.orchestrator.tls.cacert }}
      {{ if $.Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ $.Values.orchestrator.tls.mtls.clientCertificate }}
      {{ end }}
      {{ end }}
    {{- with .Values.api.events.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.api.events.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.api.events.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- end }}
