apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-scheduler
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler
    app.kubernetes.io/part-of: {{ template "substra.name" . }}
spec:
  replicas: {{ .Values.celeryworker.replicaCount }}
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- with $.Values.backend.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      initContainers:
      {{- if .Values.privateCa.enabled }}
      - name: add-cert
        image: {{ .Values.privateCa.image.repository }}
        imagePullPolicy: {{ .Values.privateCa.image.pullPolicy }}
        command: ['sh', '-c']
        args:
        - |
          {{- if .Values.privateCa.image.apkAdd }}
          apk add --update ca-certificates openssl
          {{- end }}
          update-ca-certificates && cp /etc/ssl/certs/* /tmp/certs/
        volumeMounts:
          - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
            name: private-ca
            subPath: {{ .Values.privateCa.configMap.fileName }}
          - mountPath: /tmp/certs/
            name: ssl-certs
      {{- end }}
      containers:
        - name: scheduler
          image: "{{ .Values.celeryworker.image.repository }}:{{ .Values.celeryworker.image.tag }}"
          {{- if .Values.celeryworker.image.pullPolicy }}
          imagePullPolicy: "{{ .Values.celeryworker.image.pullPolicy }}"
          {{- end }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
          {{- end }}
          command: ["/bin/bash"]
          args: ["-c", "celery -A backend worker -l info -n {{ .Values.organization.name }} -Q {{ .Values.organization.name }},scheduler,celery --hostname {{ .Values.organization.name }}.scheduler"]
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-ledger
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.celery.{{ .Values.backend.settings }}
            - name: ORG_NAME
              value: {{ .Values.organization.name }}
            - name: BACKEND_DB_NAME
              value: {{ .Values.postgresql.postgresqlDatabase }}
            - name: BACKEND_DB_USER
              value: {{ .Values.postgresql.postgresqlUsername }}
            - name: BACKEND_DB_PWD
              value: {{ .Values.postgresql.postgresqlPassword }}
            - name: DATABASE_HOST
              value: {{ .Release.Name }}-postgresql
            - name: CELERY_BROKER_URL
              value: "amqp://{{ .Values.rabbitmq.rabbitmq.username }}:{{ .Values.rabbitmq.rabbitmq.password }}@{{ .Release.Name }}-{{ .Values.rabbitmq.host }}:{{ .Values.rabbitmq.port }}//"
            - name: PYTHONUNBUFFERED
              value: "1"
          volumeMounts:
            - name: user-cert
              mountPath: /var/hyperledger/msp/signcerts
            - name: user-key
              mountPath: /var/hyperledger/msp/keystore
            - name: peer-tls-server
              mountPath: /var/hyperledger/tls/server/pair
            - name: peer-tls-client
              mountPath: /var/hyperledger/tls/client/pair
            - name: cacert
              mountPath: /var/hyperledger/ca
            {{- if .Values.privateCa.enabled }}
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            {{- end }}
          resources:
            {{- toYaml .Values.celeryscheduler.resources | nindent 12 }}
      volumes:
      - name: user-cert
        secret:
          secretName: {{ $.Values.secrets.user.cert }}
      - name: user-key
        secret:
          secretName: {{ $.Values.secrets.user.key }}
      - name: peer-tls-server
        secret:
          secretName: {{ $.Values.secrets.peer.tls.server }}
      - name: peer-tls-client
        secret:
          secretName: {{ $.Values.secrets.peer.tls.client }}
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        configMap:
          name: {{ .Values.privateCa.configMap.name }}
      {{- end }}
      - name: cacert
        secret:
          secretName: {{ $.Values.secrets.caCert }}
    {{- with .Values.celeryworker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celeryworker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celeryworker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
