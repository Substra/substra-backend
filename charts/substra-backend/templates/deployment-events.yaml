apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-events
  labels:
    {{ include "substra.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-events
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-events
        {{ include "substra.selectorLabels" . | nindent 8}}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-events
        {{ include "substra.labels" . | nindent 8 }}
    spec:
      {{- with .Values.events.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- if .Values.events.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.events.podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.events.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.events.podSecurityContext.runAsGroup }}
      {{- end }}
      serviceAccountName: {{ include "substra.events.serviceAccountName" . }}
      containers:
        - name: event-app
          image: {{ include "common.images.name" .Values.events.image }}
          imagePullPolicy: {{ .Values.events.image.pullPolicy }}
          command: ["/bin/bash"]
          {{- if eq .Values.settings "prod" }}
          args: ["-c", "uwsgi --ini uwsgi.ini"]
          {{- else }}
          args: ["-c", "watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- uwsgi --ini uwsgi.ini"]
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
            - configMapRef:
                name: {{ include "substra.fullname" . }}-settings
            - configMapRef:
                name: {{ include "substra.fullname" . }}-database
            - configMapRef:
                name: {{ include "substra.fullname" . }}-rabbitmq
            - secretRef:
                name: {{ include "substra.fullname" . }}-rabbitmq
            - secretRef:
                name: {{ include "substra.fullname" . }}-database
          env:
            - name: NAMESPACE
              valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.events.{{ .Values.settings }}
            # it's safe to allow async django db calls as the event app only reads
            - name: DJANGO_ALLOW_ASYNC_UNSAFE
              value: "true"
          volumeMounts:
            - name: uwsgi
              mountPath: /usr/src/app/uwsgi.ini
              subPath: uwsgi.ini
              readOnly: true
            {{- if .Values.privateCa.enabled }}
            - mountPath: /etc/ssl/certs
              name: ssl-certs
            {{- end }}
            {{ if $.Values.orchestrator.rabbitmq.tls.enabled }}
            - name: orchestrator-rabbitmq-tls-client-pair
              mountPath: /var/substra/orchestrator_rabbitmq/tls/client
            {{ end }}
            {{ if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-cacert
              mountPath: /var/substra/orchestrator/tls/server
            {{ if $.Values.orchestrator.tls.mtls.enabled }}
            - name: orchestrator-tls-client-pair
              mountPath: /var/substra/orchestrator/tls/client
            {{ end }}
            {{ end }}
      initContainers:
        {{- if .Values.privateCa.enabled }}
        - name: add-cert
          image: {{ include "common.images.name" .Values.privateCa.image }}
          imagePullPolicy: {{ .Values.privateCa.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          command: ['sh', '-c']
          args:
          - |
            {{- if .Values.privateCa.image.apkAdd }}
            apt update
            apt install -y ca-certificates openssl
            {{- end }}
            update-ca-certificates && cp /etc/ssl/certs/* /tmp/certs/
          volumeMounts:
            - mountPath: /usr/local/share/ca-certificates/{{ .Values.privateCa.configMap.fileName }}
              name: private-ca
              subPath: {{ .Values.privateCa.configMap.fileName }}
            - mountPath: /tmp/certs/
              name: ssl-certs
        {{- end }}
        - name: wait-postgresql
          image: jwilder/dockerize:0.6.1
          command: ['dockerize', '-wait', 'tcp://{{ template  "postgresql.serviceName" . }}:5432']
        - name: wait-init-migrations
          image: {{ include "common.images.name" .Values.events.image }}
          command: ['bash', '/usr/src/app/wait-init-migration.sh']
          volumeMounts:
            - name: volume-wait-init-migrations
              mountPath: /usr/src/app/wait-init-migration.sh
              subPath: wait-init-migration.sh
          envFrom:
            - configMapRef:
                name: {{ include "substra.fullname" . }}-orchestrator
            - configMapRef:
                name: {{ include "substra.fullname" . }}-database
            - configMapRef:
                name: {{ include "substra.fullname" . }}-settings
            - secretRef:
                name: {{ include "substra.fullname" . }}-database
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.{{ .Values.settings }}
      volumes:
      - name: uwsgi
        configMap:
          name: {{ include "substra.fullname" . }}-events-uwsgi
      - name: volume-wait-init-migrations
        configMap:
          name: {{ include "substra.fullname" . }}-wait-init-migrations
      {{- if .Values.privateCa.enabled }}
      - name: ssl-certs
        emptyDir: {}
      - name: private-ca
        configMap:
          name: {{ .Values.privateCa.configMap.name }}
      {{- end }}
      {{ if $.Values.orchestrator.tls.enabled }}
      - name: orchestrator-tls-cacert
        configMap:
          name: {{ $.Values.orchestrator.tls.cacert }}
      {{ if $.Values.orchestrator.tls.mtls.enabled }}
      - name: orchestrator-tls-client-pair
        secret:
          secretName: {{ $.Values.orchestrator.tls.mtls.clientCertificate }}
      {{ end }}
      {{ end }}
      {{ if $.Values.orchestrator.rabbitmq.tls.enabled }}
      - name: orchestrator-rabbitmq-tls-client-pair
        secret:
          secretName: {{ $.Values.orchestrator.rabbitmq.tls.clientCertificate }}
      {{ end }}
    {{- with .Values.events.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.events.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.events.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
