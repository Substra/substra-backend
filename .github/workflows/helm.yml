name: Helm

on:
  push:
    branches:
      - "main"
    paths:
      - "charts/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "charts/**"
      - ".github/workflows/helm.yml"
  workflow_dispatch: {}

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  set-path:
    name: "Init"
    runs-on: ubuntu-latest
    steps:
    - name: Set default charts-path if not provided
      id: set-path
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        echo "repo=$REPO_NAME" >> $GITHUB_OUTPUT
        if [ -z "${{ inputs.charts-path }}" ]; then
          echo "path=./charts/$REPO_NAME" >> $GITHUB_OUTPUT
        else
          echo "path=${{inputs.charts-path}}" >> $GITHUB_OUTPUT
        fi
    outputs:
      charts_path: ${{ steps.set-path.outputs.path }}
      repository_name: ${{ steps.set-path.outputs.repo }}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: set-path
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-helm@v3.5
        with:
          version: "v3.12.0"
        id: install

      - name: Install dependencies
        run: sudo snap install yq

      - name: Helm repo add
        run: |
          REPOS_JSON='[{"name": "bitnami", "url": "https://charts.bitnami.com/bitnami"},{"name": "std-helm", "url": "https://charts.helm.sh/stable"},{"name": "twumi", "url": "https://helm.twun.io"},{"name": "localstack", "url": "https://localstack.github.io/helm-charts"}]'
          echo "$REPOS_JSON" | jq -c '.[]' | while read repo; do
            name=$(echo "$repo" | jq -r '.name')
            url=$(echo "$repo" | jq -r '.url')
            helm repo add "$name" "$url"
          done

      - name: Helm dep update
        run: helm dep update ${{ needs.set-path.outputs.charts_path }}

      - name: Helm lint
        if: always()
        run: helm lint ${{ needs.set-path.outputs.charts_path }}

      - name: Check lockfile
        if: always()
        run: |
          DIR=${{ needs.set-path.outputs.charts_path }}
          if [[ ! -e $DIR/Chart.lock ]]; then
            echo "::warning:: $DIR/Chart.lock not found"
          else
            git diff --exit-code $DIR/Chart.lock || (echo "$DIR/Chart.lock needs to be updated!" >&2 && exit 1)
          fi

      - name: Read version
        if: always()
        run: echo CHART_VERSION=$(yq eval .version ${{ needs.set-path.outputs.charts_path }}/Chart.yaml) >> $GITHUB_OUTPUT
        id: get-chart-version

      - name: Check version
        if: always()
        run: |
          helm repo add substra https://substra.github.io/charts

          RES=$(helm search repo ${{ needs.set-path.outputs.repository_name }} --version ${{ steps.get-chart-version.outputs.CHART_VERSION }})

          if [ "${RES}" == "No results found" ]; then
            echo "Version incremented"
          else
            echo "Version ${{ steps.get-chart-version.outputs.CHART_VERSION }} already exists."
            echo "Make sure to update you chart version in the Chart.yaml file"
            exit 1
          fi

      - name: Check changelog
        if: always()
        run: |
          VERSION_PATTERN="([0-9]+\.){2}[0-9]+(-.*)?"
          DATE_PATTERN="[0-9]{4}-[0-9]{2}-[0-9]{2}"
          HEADING_PATTERN="## \[${VERSION_PATTERN}\] - ${DATE_PATTERN}"
          CHANGELOG="${{ needs.set-path.outputs.charts_path }}/CHANGELOG.md"

          VERSION=${{ steps.get-chart-version.outputs.CHART_VERSION }}

          VERSION_DATE=$(grep -E "${HEADING_PATTERN}" ${CHANGELOG})

          VERSION_DATE=$(echo "$VERSION_DATE" | grep "${VERSION}" || true)

          if [[ -z "$VERSION_DATE" ]]; then
            echo "$CHANGELOG does not contain an entry for version ${VERSION}" && exit 1
          fi

          VERSION_DATE=$((echo "$VERSION_DATE" | grep -oE "${DATE_PATTERN}") || true)

          if [[ -z "$VERSION_DATE" ]]; then
            echo "${CHANGELOG} does not contain the correct format for version $VERSION." && exit 1
          fi

          ALL_DATES=$(grep -E "${HEADING_PATTERN}" ${CHANGELOG} | grep -oE "${DATE_PATTERN}")

          LATEST_DATE=$(echo "$ALL_DATES" | sort -r | head -n 1)

          if [[ "$VERSION_DATE" == "$LATEST_DATE" ]]; then
            echo "${CHANGELOG} updated correctly with version $VERSION and date $VERSION_DATE is the latest."
          else
            echo "The date $VERSION_DATE associated with version $VERSION is not the latest in the ${CHANGELOG}. Latest date is $LATEST_DATE." && exit 1
          fi

      - name: Check readme
        if: always()
        run: |
          CHARTS_DIR="${{needs.set-path.outputs.charts_path}}"
          if [[ ! -e $CHARTS_DIR/README.md ]]; then
            echo "::warning:: $CHARTS_DIR/README.md file not found"
            exit 0
          fi

          cd $CHARTS_DIR
          npx https://github.com/bitnami-labs/readme-generator-for-helm/tree/2.5.0 -v values.yaml -r README.md

          diff=$(git status --porcelain)
          if [ -z "$diff" ]; then
            exit 0
          else
            echo "git status --porcelain: $diff"
            echo "There should be no change generated, please run 'make doc' in $CHARTS_DIR to update the chart README.md"
            exit 1
          fi

      - name: Helm package
        if: always()
        run: |
          CHARTS_PATH=${{ needs.set-path.outputs.charts_path }}
          helm dep build ${CHARTS_PATH}
          helm package ${CHARTS_PATH}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    # Allowing manual workflow_dispatch on main branches as version is always verified
    if: github.ref == 'refs/heads/support/0.38.x' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs:
      - set-path
      - tests
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo snap install yq

      - uses: azure/setup-helm@v3.5
        with:
          version: "v3.12.0"
        id: install

      - name: Helm repo add
        run: |
          REPOS_JSON='${{ inputs.helm-repositories }}'
          echo "$REPOS_JSON" | jq -c '.[]' | while read repo; do
            name=$(echo "$repo" | jq -r '.name')
            url=$(echo "$repo" | jq -r '.url')
            helm repo add "$name" "$url"
          done

      - name: Mark chart as pre-release
        # This avoids the chart being tagged as latest release on artifacthub
        # see https://artifacthub.io/docs/topics/annotations/helm/
        run: |
          CHART_YAML_LOCATION=${{ needs.set-path.outputs.charts_path }}/Chart.yaml
          if [ $(yq '.version | contains("-")' $CHART_YAML_LOCATION) == 'true' ]
          then
            yq '.annotations."artifacthub.io/prerelease" = "true"' $CHART_YAML_LOCATION > .Chart.yaml.new
            mv .Chart.yaml.new $CHART_YAML_LOCATION
            echo "::warning:: $CHART_YAML_LOCATION has been marked as pre-release"
          fi

      - name: Helm package
        run: |
          CHARTS_PATH=${{ needs.set-path.outputs.charts_path }}
          helm dep build ${CHARTS_PATH}
          helm package ${CHARTS_PATH}

      - name: Clone substra/charts
        uses: actions/checkout@v4
        with:
          repository: Substra/charts
          ref: "main"
          token: ${{ secrets.CHARTS_GITHUB_TOKEN }}
          path: substra-charts

      - name: Publish chart
        run: |
          mv ${{ needs.set-path.outputs.repository_name }}-$(yq ".version" ${{ needs.set-path.outputs.charts_path }}/Chart.yaml).tgz substra-charts/
          cd substra-charts
          helm repo index .
          git add .
          git config --global user.email "gh-actions@github.com"
          git config --global user.name "GitHub Action"
          git commit -s --message "GitHub Action: ${{ github.repository }}@${{ github.sha }}"
          git push --quiet --set-upstream origin main
